name: Deploy Website CI/CD

on:
  push:
    branches:
      - trunk

env:
  website_service: waldoibarra/website
  COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
  TF_VAR_domain_name: waldoibarra.com
  TF_VAR_hosted_zone_id: ${{ secrets.TF_VAR_hosted_zone_id }}
  TF_VAR_aws_profile: default
  TF_VAR_Application: Personal static website

jobs:
  lint-test-build-deploy:
    name: Lint, test, build and deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build website Docker image
        id: build-website-image
        run: |
          docker buildx build -t ${{ env.website_service }} --target production .

      - name: Lint Terraform, TypeScript, CSS files and commit message
        id: lint-files
        run: |
          docker container run --rm ${{ env.website_service }} npm run ci:lint
          docker container run --rm -v ${{ github.workspace }}/infrastructure:/data -t ghcr.io/terraform-linters/tflint:v0.43.0
          docker container run --rm -e COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}" ${{ env.website_service }} npm run ci:lint:commit

      - name: Unit test React code
        id: unit-test-react
        run: |
          docker container run --rm ${{ env.website_service }} npm run ci:test

      - name: Build React app
        id: build-react-app
        run: |
          docker container run --name site-build ${{ env.website_service }} npm run ci:build
          docker container cp site-build:/app/build .
          docker container rm site-build

      - name: Deploy website
        id: deploy-website
        run: |
          docker compose -f infrastructure/compose.yaml build terraform
          docker compose -f infrastructure/compose.yaml run -T --rm terraform init
          docker compose -f infrastructure/compose.yaml run -T --rm terraform plan -out tfplan
          docker compose -f infrastructure/compose.yaml run -T --rm terraform apply tfplan
